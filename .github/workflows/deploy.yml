name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: speech-to-text-app
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Check if image exists
      id: check-image
      run: |
        IMAGE_EXISTS=$(docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} > /dev/null 2>&1 && echo "true" || echo "false")
        echo "exists=$IMAGE_EXISTS" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      if: steps.check-image.outputs.exists == 'false'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        password: ${{ secrets.DIGITALOCEAN_PASSWORD }}
        script: |
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
          fi

          # Pull the latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} || {
            echo "Failed to pull image. Retrying in 30 seconds..."
            sleep 30
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          }
          
          # Stop and remove existing container
          docker stop ${{ env.DOCKER_IMAGE }} || true
          docker rm ${{ env.DOCKER_IMAGE }} || true
          
          # Run new container
          docker run -d \
            --name ${{ env.DOCKER_IMAGE }} \
            -p 8000:8000 \
            -p 7860:7860 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Clean up old images
          docker image prune -f 